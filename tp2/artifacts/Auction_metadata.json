{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "duration",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "base",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "item",
						"type": "string"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "detail",
						"type": "string"
					}
				],
				"name": "AccessNotAllowed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "enum Auction.Stage",
						"name": "stage",
						"type": "uint8"
					}
				],
				"name": "NotAllowedAtStage",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "detail",
						"type": "string"
					}
				],
				"name": "NotEnoughHigh",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotWinningBid",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NothingToWithdraw",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "auctioneItem",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "winner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "AuctionFinished",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "item",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "base",
						"type": "uint256"
					}
				],
				"name": "AuctionOpened",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "bidder",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "NewBid",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "bid",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "close",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "showBids",
				"outputs": [
					{
						"components": [
							{
								"internalType": "bool",
								"name": "exists",
								"type": "bool"
							},
							{
								"internalType": "uint256",
								"name": "timestamp",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "accumulated",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							}
						],
						"internalType": "struct Auction.Bid[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "showWinner",
				"outputs": [
					{
						"internalType": "address",
						"name": "winner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Cristian Alinez",
			"errors": {
				"AccessNotAllowed(string)": [
					{
						"params": {
							"detail": "Error detail"
						}
					}
				],
				"NotAllowedAtStage(uint8)": [
					{
						"params": {
							"stage": "Current stage"
						}
					}
				],
				"NotEnoughHigh(string)": [
					{
						"params": {
							"detail": "Error detail"
						}
					}
				]
			},
			"events": {
				"AuctionFinished(string,address,uint256)": {
					"params": {
						"amount": "Amount of the highest bid.",
						"auctioneItem": "Name of the Item on which was the Auction.",
						"winner": "Bidder Address of the highest bid."
					}
				},
				"AuctionOpened(string,uint256)": {
					"params": {
						"base": "Initial value of the Auction",
						"item": "Name of the Item on which was the Auction."
					}
				},
				"NewBid(address,uint256)": {
					"params": {
						"amount": "Amount of the Bid placed.",
						"bidder": "bidder Address of the user placing a new Bid."
					}
				}
			},
			"kind": "dev",
			"methods": {
				"constructor": {
					"author": "Cristian Alinez",
					"params": {
						"base": "Initial value of the bid",
						"duration": "Time limit in seconds until valid bids are accepted",
						"item": "Name of the auction Item"
					}
				}
			},
			"title": "Auction Contract. Module 2 Final Project",
			"version": 1
		},
		"userdoc": {
			"errors": {
				"AccessNotAllowed(string)": [
					{
						"notice": "Error that is thrown when the user does not have a valid role to perform this action."
					}
				],
				"NotAllowedAtStage(uint8)": [
					{
						"notice": "Error that is thrown when the user tries to perform an action not allowed in the current stage."
					}
				],
				"NotEnoughHigh(string)": [
					{
						"notice": "Error that is thrown when a bid is lower than 5% greater of the previous bid"
					}
				],
				"NotWinningBid()": [
					{
						"notice": "Error that is thrown when no bid has been placed and the Auction has ended without a bid."
					}
				],
				"NothingToWithdraw()": [
					{
						"notice": "Error that is thrown when a bidder tries to withdraw remaining funds that you do not have"
					}
				]
			},
			"events": {
				"AuctionFinished(string,address,uint256)": {
					"notice": "Event emitted when the auction is over and a winner was found."
				},
				"AuctionOpened(string,uint256)": {
					"notice": "Event emitted when the auction is open and bids are placed."
				},
				"NewBid(address,uint256)": {
					"notice": "Event emitted when a new bid is placed in the Auction."
				}
			},
			"kind": "user",
			"methods": {
				"bid()": {
					"notice": "Function that places a bid on the auction, it will revert with an error code in case of bid isn't a 5% higher than the last one."
				},
				"close()": {
					"notice": "Function that closes the auction and transfers all remaining funds to the bidders that didn't won the auction, taking 2% as commission."
				},
				"constructor": {
					"notice": "Constructor that setup the auction configuration and announces the opening of the auction"
				},
				"showWinner()": {
					"notice": "Function tha allow to get the address of the highest bidder, the amount of his bids, if he has been placed any bid or not."
				},
				"withdrawal()": {
					"notice": "Function that allows bidders to withdraw the remaining funds from the last bid. It will reverse with an error code if the bidder has no remaining funds to withdraw."
				}
			},
			"notice": "This contract manages an Auction allowing bidders to place a higher bid to win the item up for auction.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"tp2/auction.sol": "Auction"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"tp2/auction.sol": {
			"keccak256": "0xb7b7612981f68e589a34b738b4b4821346a55e98cddf5a6bb0794186a6683bfc",
			"license": "MIT",
			"urls": [
				"bzz-raw://da38a6747ae65c96c0f97a0a7ca2b99037c564af44b1d74b045b467a066608b9",
				"dweb:/ipfs/QmNTEEUK12ReVFsX15KLttvRL88BYATVASUNWPspsLFKa8"
			]
		}
	},
	"version": 1
}